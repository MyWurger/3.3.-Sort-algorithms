#pragma once
/*******************************************************************/
/*              П Р О Т О Т И П Ы    Ф У Н К Ц И Й                 */
/*******************************************************************/
// СОРТИРОВКИ МАССИВА ПО ВОЗРАСТАНИЮ:

// Шейкерная сортировка по возрастанию
void Shaker_sort_vozr(int* pznachenue      // указатель на первый элемент динамическогомассива-вектора
	                , int begin            // начало динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	                , int end              // конец динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	                , int number);         // длина динамического массива-вектора
 
// сортировка выбором  по возрастанию
void Selection_sort_vozr(int* pznachenue   // указатель на первый элемент динамического массива-вектора
	                   , int begin         // начало динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	                   , int end           // конец динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	                   , int number);      // длина динамического массива-вектора

// сортировка вставками по возрастанию
void Insertion_sort_vozr(int* pznachenue   // указатель на первый элемент динамического массива-вектора
	                   , int begin         // начало динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	                   , int end           // конец динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	                   , int number);      // длина динамического массива-вектора

// сортировка слиянием по возрастанию
void Merge_sort_vozr(int* pznachenue       // указатель на первый элемент динамического массива-вектора
	               , int begin             // начало динамического массива-вектора
	               , int end               // конец динамического массива-вектора
	               , int number);          // длина динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве

// "Влавствование" - сливание массивов для Merge_sort_vozr
void Merge_vozr(int* pznachenue            // указатель на первый элемент динамического массива-вектора
	          , int begin                  // начало динамического массива-вектора
	          , int middle                 // середина динамического массива-вектора
	          , int end);                  // конец динамического массива-вектора

// быстрая сортировка по возрастанию
void Quick_sort_vozr(int* pznachenue       // указатель на первый элемент динамического массива-вектора
	               , int begin             // начало динамического массива-вектора
	               , int end               // конец динамического массива-вектора
	               , int number);          // длина динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве

// разделение и перестановка для Quick_sort_vozr
int Partition_vozr(int* pznachenue         // указатель на первый элемент динамического массива-вектора
	             , int begin               // начало динамического массива-вектора
	             , int end);               // конец динамического массива-вектора

// сортировка Шелла по возрастанию
void Shell_sort_vozr(int* pznachenue       // указатель на первый элемент динамического массива-вектора
	               , int begin             // начало динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	               , int end               // конец динамического массива-вектора (не нужно фактически). Поставлено, чтобы все функции были в одном массиве
	               , int number);          // длина динамического массива-вектора